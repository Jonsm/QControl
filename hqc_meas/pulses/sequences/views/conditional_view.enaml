# -*- coding: utf-8 -*-
# =============================================================================
# module : conditional_view.enaml
# author : Matthieu Dartiailh
# license : MIT license
# =============================================================================
"""
"""
from enaml.layout.api import hbox, align, spacer, vbox
from enaml.widgets.api import (PushButton, Container, Label, Field,
                               GroupBox, ScrollArea, Menu, Action, Stack,
                               StackItem, Form, Notebook, Page, CheckBox,
                               ObjectCombo, Splitter, SplitItem)
from enaml.core.api import Conditional

from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from hqc_meas.utils.widgets.dict_editor import DictEditor

from ...sequences_views import SequenceEditor, VarEditor
from ...entry_eval import EVALUATER_TOOLTIP

enamldef ConditionalSequenceView(GroupBox): view:
    """ View for Sequence.

    """
    attr item
    alias core : editor.core
    alias cache : editor.cache

    title << '{} {}'.format(sequence.index, sequence.name)
    padding = 2
    constraints << [vbox(hbox(t_bool, cond_lab, cond_val),
                         hbox(*t_def.items), nb)]\
                   if t_def.condition else\
                   [vbox(hbox(t_bool, cond_lab, cond_val), nb)]

    CheckBox: t_bool:
        text = 'Time'
        checked := item.time_constrained
        tool_tip = 'Whether to define the start and stop of the sequence.'

    Label: cond_lab:
        text = 'Condition'
    QtLineCompleter: cond_val:
        text := item.condition

    Conditional: t_def:
        condition << item.time_constrained
        Container:
            padding = 0
            constraints = [hbox(vbox(def_lab, def_val), defs)]
            Label: def_lab:
                text = 'Mode'
            ObjectCombo: def_val:
                items << list(item.get_member('def_mode').items)
                selected := item.def_mode

        Splitter: defs:
            SplitItem:
                Container:
                    padding = 0
                    Label:
                        text << item.def_mode.split('/')[0]
                    QtLineCompleter:
                        hug_width = 'ignore'
                        text := item.def_1
                        entries_updater << item.parent.get_bindable_vars
                        tool_tip = EVALUATER_TOOLTIP
            SplitItem:
                Container:
                    padding = 0
                    Label:
                        text << item.def_mode.split('/')[1]
                    QtLineCompleter:
                        hug_width = 'ignore'
                        text := item.def_2
                        entries_updater << item.parent.get_bindable_vars
                        tool_tip = EVALUATER_TOOLTIP

    Notebook: nb:
        tabs_closable = False
        Page:
            title = 'Sequence'
            SequenceEditor: editor:
                sequence := view.item

        Page:
            title = 'Local vars'
            DictEditor(VarEditor): ed:
                ed.title = 'Name : formula'
                ed.model = item
                ed.iterable_name = 'local_vars'

SEQUENCES_VIEWS = {'ConditionalSequence': ConditionalSequenceView}

# -*- coding: utf-8 -*-
#==============================================================================
# module : manifest.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
from enaml.stdlib.message_box import warning
from enaml.workbench.api import PluginManifest, ExtensionPoint, Extension
from enaml.workbench.ui.api import ActionItem
from inspect import cleandoc
from hqc_meas.utils.preferences.api import Preferences
from hqc_meas.app_closing import ClosingApp
from hqc_meas.instruments.manager.api import InstrUser


def measure_plugin_factory():
    from .plugin import MeasurePlugin
    return MeasurePlugin()

def workspace_factory(workbench):
    from .workspace import MeasureSpace
    return MeasureSpace()


def validate_closing(window, event):
    """ Check that no measure is currently running befoire app closing.

    """
    workbench = window.workbench
    plugin = workbench.get_plugin('hqc_meas.measure', force_create=False)
    if plugin and plugin.flags:
        event.ignore()
        warning(window, 'Measure running',
                cleandoc('''A measure is currently running please stop it
                         before exiting.'''))

enamldef MeasureManifest(PluginManifest):
    """
    """
    id = u'hqc_meas.measure'
    factory = measure_plugin_factory

    ExtensionPoint:
        id = u'engines'
    ExtensionPoint:
        id = u'monitors'
    ExtensionPoint:
        id = u'checks'
    ExtensionPoint:
        id = u'headers'
    ExtensionPoint:
        id = u'editors'

    Extension:
        id = 'prefs'
        point = u'hqc_meas.preferences.pref_plugin'
        Preferences:
            pass

    Extension:
        id = 'instr_user'
        point = 'hqc_meas.instr_manager.users'
        InstrUser:
            default_policy = 'unreleasable'

    Extension:
        id = 'app_closing'
        point = 'hqc_meas.app.closing'
        ClosingApp:
            validate = validate_closing

    Extension:
        id = 'workspace'
        point = u'enaml.workbench.ui.workspaces'
        factory = workspace_factory

    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
                path = '/workspace/measure'
                label = 'Measure'
                shortcut = 'Ctrl+1'
                group = 'spaces'
                command = 'enaml.workbench.ui.select_workspace'
                parameters = {'workspace': 'hqc_meas.measure.workspace'}

#    Extension:
#        # TODO UI
#        # NB this is probably not the right way to do this, it woulkd be better
#        # for the workspace to register a new manifest on startup contributing
#        # the menus.

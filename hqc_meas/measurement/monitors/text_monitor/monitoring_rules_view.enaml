from enaml.core.api import Looper
from enaml.layout.api import hbox, spacer, vbox
from enaml.widgets.api import (PushButton, Container, CheckBox, Dialog,
                              Label, Form, Field, ObjectCombo)
from enaml.stdlib.mapped_view import MappedView

from operator import attrgetter

from hqc_meas.utils.widgets.qt_list_str_widget import QtListStrWidget
from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter

from .rules import (AbstractMonitorRule, RejectRule, FormatRule)


enamldef NoneView(Container):
    attr rule


enamldef RejectRuleView(Form):
    attr rule
    Label:
        text = 'Rule name'
    Field: name:
        text := rule.name
    Label:
        text = 'Suffix'
    Field:
        text := rule.suffixes[0]


enamldef SuffixField(Dialog): dial:
    alias suffix : field.text
    title = 'Enter a suffix'
    Container:
        hug_height = 'strong'
        constraints << [vbox(field, hbox(spacer, cancel, ok))]
        Field: field:
            pass
        PushButton: ok:
            text = 'Ok'
            clicked :: dial.accept()
        PushButton: cancel:
            text = 'Cancel'
            clicked :: dial.reject()


enamldef FormatRuleView(Container):
    attr rule
    constraints = [vbox(hbox(name_lab, name),
                        hbox(suf_lab, spacer),
                        hbox(qt, vbox(add, edit, delete, spacer)),
                        hbox(suff_lab, suff),
                        hbox(for_lab, for_val)),
                    ]
    Label: name_lab:
        hug_width = 'strong'
        text = 'Rule name'
    Field: name:
        text := rule.name
    Label: suf_lab:
        hug_width = 'strong'
        text = 'Suffixes'
    QtListStrWidget: qt:
        items << rule.suffixes
    PushButton: add:
        text = 'Add'
        clicked ::
            dial = SuffixField()
            if dial.exec_() and dial.suffix:
                rule.suffixes.append(dial.suffix)
                qt.refresh_items()
    PushButton: edit:
        text = 'Edit'
        clicked ::
            old = qt.selected_item
            dial = SuffixField(suffix = old)
            if dial.exec_() and dial.suffix:
                rule.suffixes[qt.selected_index] = dial.suffix
    PushButton: delete:
        text = 'Delete'
        clicked :: del rule.suffixes[qt.selected_index]
    Label: suff_lab:
        hug_width = 'strong'
        text = 'New suffix'
    Field: suff:
        text := rule.new_entry_suffix
    Label: for_lab:
        hug_width = 'strong'
        text = 'Formatting'
    QtLineCompleter: for_val:
        text := rule.new_entry_formatting
        entries << rule.suffixes


RULES_VIEWS = {type(None) : NoneView,
              RejectRule : RejectRuleView,
              FormatRule : FormatRuleView}


enamldef CreateRuleDialog(Dialog): dial:
    attr rule = None
    title = 'Create a rule'
    Container:
        constraints << [vbox(
                        com, vbox(*map.objects),
                        hbox(spacer, ok, cancel))
                        ]
        ObjectCombo: com:
            items = sorted([r for r in RULES_VIEWS.keys()
                                    if r is not type(None)])
            to_string = lambda obj : obj.__name__
            selected = None
            selected ::
                dial.rule = selected()
        MappedView: map:
            model << rule
            typemap = RULES_VIEWS
            modelkey = 'rule'
        PushButton: ok:
            text = 'Ok'
            clicked ::
                dial.accept()
        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()


enamldef EditRuleDialog(Dialog): dial:
    attr rule
    title = 'Editing : {}'.format(rule.name)
    Container:
        constraints = [vbox(
                        hbox(*map.objects),
                        hbox(spacer, ex))
                        ]
        MappedView: map:
            model << rule
            typemap = RULES_VIEWS
            modelkey = 'rule'
        PushButton: ex:
            text = 'Close'
            clicked ::
                dial.accept()


enamldef EditRulesView(Dialog): dial:
    attr monitor
    attr edition_performed
    title = 'Rules'
    Container:
        constraints << [vbox(
                            hbox(qlist, vbox(*map.objects),
                                vbox(add, edit, delete, spacer)),
                            hbox(spacer, ex))]
        QtListStrWidget: qlist:
            items << [rule.name for rule in monitor.rules]
        MappedView: map:
            model << monitor.rules[qlist.selected_index] if monitor.rules else None
            typemap = RULES_VIEWS
            modelkey = 'rule'
        PushButton: add:
            text = 'Add'
            clicked ::
                dial = CreateRuleDialog()
                if dial.exec_():
                    monitor.rules.append(dial.rule)
                    qlist.refresh_items()
                    edition_performed = True
        PushButton: edit:
            text = 'Edit'
            clicked ::
                EditRuleDialog(
                    rule = monitor.rules[qlist.selected_index]).exec_()
                edition_performed = True
        PushButton: delete:
            text = 'Delete'
            clicked ::
                del monitor.rules[qlist.selected_index]
                edition_performed = True
        PushButton: ex:
            text = 'Close'
            clicked ::
                dial.accept()
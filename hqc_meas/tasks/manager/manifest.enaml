# -*- coding: utf-8 -*-
#==============================================================================
# module : tasks/manager/manifest.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from enaml.workbench.api import PluginManifest, Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from hqc_meas.utils.preferences.api import Preferences
from hqc_meas.utils.state.api import State
from hqc_meas.utils.dependencies.api import BuildDependency
from hqc_meas.utils.widgets.errors_display import ErrorsDisplay

from .building import build_task, build_root
from .saving import save_task

def manager_plugin_factory():
    """ Factory funcion for the instr manager plugin.

    """
    from .plugin import TaskManagerPlugin
    return TaskManagerPlugin()

#--- Command handlers ---------------------------------------------------------

# TODO implement a true manager
#def show_manager(event):
#    """ Handler for the 'hqc_meas.instr_manager.show_manager' command
#
#    """
#    manager = event.workbench.get_plugin('hqc_meas.')
#    from .manager_view import TaskManagerView
#    TaskManagerView(manager=manager).show()

def show_starting_errors(event):
    """ Handler for the 'hqc_meas.task_manager.show_errors' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    ErrorsDisplay(ui.window, title='Task manager start up errors',
                  errors=manager.report(),
                  errors_type='Import failures').exec_()


def tasks_request(event):
    """ Handler for the 'hqc_meas.task_manager.tasks_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.tasks_request(**event.parameters)


def views_request(event):
    """ Handler for the 'hqc_meas.task_manager.views_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.views_request(**event.parameters)


def interfaces_request(event):
    """ Handler for the 'hqc_meas.task_manager.interfaces_request' command.

    Two keywords can be used in parameters :
    - 'tasks' : the provided names will then be assumed to be the ones of tasks
                for which the corresponding interfaces should be returned.

    - 'interfaces' : the provided names will be used directly as interfaces
                     names.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    if 'tasks' in event.parameters:
        return manager.interfaces_request(event.parameters['tasks'])
    elif 'interfaces' in event.parameters:
        return manager.interfaces_request(event.parameters['interfaces'],
                                          True)

def interface_views_request(event):
    """ Handler for the 'hqc_meas.task_manager.interface_views_request'
    command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.interface_views_request(**event.parameters)

def filter_tasks(event):
    """ Handler for the 'hqc_meas.task_manager.filter_tasks' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.filter_tasks(**event.parameters)


def config_request(event):
    """ Handler for the 'hqc_meas.task_manager.config_request' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return manager.config_request(**event.parameters)


def save_task_handler(event):
    """ Handler for the 'hqc_meas.task_manager.save_task' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return save_task(manager, **event.parameters)


def build_task_handler(event):
    """ Handler for the 'hqc_meas.task_manager.build_task' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return build_task(manager, **event.parameters)


def build_root_handler(event):
    """ Handler for the 'hqc_meas.task_manager.build_root' command.

    """
    manager = event.workbench.get_plugin('hqc_meas.task_manager')
    return build_root(manager, **event.parameters)

#--- Command and extension point descriptions ---------------------------------


SHOW_MANAGER_DESCRIPTION = \
""" Show the task manager window."""

SHOW_ERRORS_DESCRIPTION = \
""" Show the errors which happened on plugin startup."""

TASK_REQUEST_DESCRIPTION = \
""" Request the infos associated to a list of tasks. """

VIEW_REQUEST_DESCRIPTION = \
""" Request the views associated to a list of tasks. """

INTERFACE_REQUEST_DESCRIPTION = \
""" Request the interfaces associated to a list of tasks or of names. """

INTERFACE_VIEWS_REQUEST_DESCRIPTION = \
""" Request the views associated to a list of interfaces. """

FILTER_TASKS_DESCRIPTION = \
""" Filter tasks using the provided filter (filter). """

CONFIG_REQUEST_DESCRIPTION = \
""" Request the appropriate config for a task (task). """

COLLECT_DEPENDENCIES_DESCRIPTION = \
""" Collect the dependencies of a task hierarchy. """

SAVE_TASK_DESCRIPTION = \
""" Save a task to a file or object. """

BUILD_TASK_DESCRIPTION = \
""" Build a task to insert in a task hierarchy. """

BUILD_ROOT_DESCRIPTION = \
""" Build a root task. """

MANAGER_STATE_DESCRIPTION = \
""" The tasks manager gives access to the known tasks and filters."""


def collect_tasks_and_interfaces(workbench, flat_walk):
    """ Collector function for the build-dependencies extensions.

    """
    # Here we use direct call to plugin methods as this is internal to the
    # plugin
    manager = workbench.get_plugin('hqc_meas.task_manager')

    t_res = manager.tasks_request(flat_walk['task_class'],
                                  use_class_names=True)
    i_res = manager.interfaces_request(flat_walk['interface_class'],
                                       use_i_names=True)

    if t_res[1] or i_res[1]:
        mess = 'Missing tasks: {}, missing interfaces: {}'.format(t_res[1],
                                                                  i_res[1])
        raise ValueError(mess)

    dependencies = {}
    if flat_walk['task_class']:
        dependencies['tasks'] = t_res[0]
    if flat_walk['interface_class']:
        dependencies['interfaces'] = i_res[0]

    return dependencies

#--- Manifest -----------------------------------------------------------------

enamldef TaskManagerManifest(PluginManifest):
    """
    """
    id = 'hqc_meas.task_manager'
    factory = manager_plugin_factory


    Extension:
        id = 'tasks_dep'
        point = 'hqc_meas.dependencies.build'
        BuildDependency:
            id = 'hqc_meas.tasks.dependencies'
            walk_members = ['task_class', 'interface_class']
            collect = collect_tasks_and_interfaces

    Extension:
        id = 'prefs'
        point = 'hqc_meas.preferences.pref_plugin'
        Preferences:
            saving_method = 'pref_from_members'
            loading_method = 'members_from_preferences'
            auto_save = []

    Extension:
        id = 'state'
        point = 'hqc_meas.state.states'
        State:
            id = 'hqc_meas.states.task_manager'
            description = MANAGER_STATE_DESCRIPTION
            sync_members = ['tasks', 'filters']

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
#        Command:
#            id = 'hqc_meas.instr_manager.show_manager'
#            description = SHOW_MANAGER_DESCRIPTION
#            handler = show_manager
        Command:
            id = 'hqc_meas.task_manager.show_starting_errors'
            description = SHOW_ERRORS_DESCRIPTION
            handler = show_starting_errors
        Command:
            id = 'hqc_meas.task_manager.tasks_request'
            description = TASK_REQUEST_DESCRIPTION
            handler = tasks_request
        Command:
            id = 'hqc_meas.task_manager.views_request'
            description = VIEW_REQUEST_DESCRIPTION
            handler = views_request
        Command:
            id = 'hqc_meas.task_manager.interfaces_request'
            description = INTERFACE_REQUEST_DESCRIPTION
            handler = interfaces_request
        Command:
            id = 'hqc_meas.task_manager.interface_views_request'
            description = INTERFACE_VIEW_REQUEST_DESCRIPTION
            handler = interface_views_request
        Command:
            id = 'hqc_meas.task_manager.filter_tasks'
            description = FILTER_TASKS_DESCRIPTION
            handler = filter_tasks
        Command:
            id = 'hqc_meas.task_manager.config_request'
            description = CONFIG_REQUEST_DESCRIPTION
            handler = config_request
        Command:
            id = 'hqc_meas.task_manager.save_task'
            description = SAVE_TASK_DESCRIPTION
            handler = save_task_handler
        Command:
            id = 'hqc_meas.task_manager.build_task'
            description = BUILD_TASK_DESCRIPTION
            handler = build_task_handler
        Command:
            id = 'hqc_meas.task_manager.build_root'
            description = BUILD_ROOT_DESCRIPTION
            handler = build_root_handler

    Extension:
        id = 'menu'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/tools/tasks'
            label = 'Tasks'
            after = 'instr'
            ItemGroup:
                id = 'user'
#        ActionItem:
#            path = '/tasks/show_manager'
#            label = 'Manager'
#            command = 'hqc_meas.task_manager.show_manager'
        ActionItem:
            path = 'tools/tasks/show_manager'
            label = 'Start up errors'
            command = 'hqc_meas.task_manager.show_starting_errors'

# -*- coding: utf-8 -*-
# =============================================================================
# module : loop_exceptions_views.py
# author : Matthieu Dartiailh
# license : MIT license
# =============================================================================
"""
"""
from enaml.widgets.api import (GroupBox, Label)
from enaml.layout.api import hbox
from inspect import cleandoc

from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from hqc_meas.tasks.tools.string_evaluation import EVALUATER_TOOLTIP


enamldef BreakView(GroupBox): view:

    attr task

    title << task.task_name
    padding = 2
    constraints = [hbox(cond_lab, cond_val)]

    Label: cond_lab:
        text = 'Condition'
        tool_tip = 'Will break out of the loop when evaluates to True.'
    QtLineCompleter: cond_val:
        text := task.condition
        entries_updater << task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP


enamldef ContinueView(GroupBox): view:

    attr task

    title << task.task_name
    padding = 2
    constraints = [hbox(cond_lab, cond_val)]

    Label: cond_lab:
        text = 'Condition'
        tool_tip = cleandoc('''Will skip the following task in the loop when
                            evaluates to True.''')
    QtLineCompleter: cond_val:
        text := task.condition
        entries_updater << task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP


TASK_VIEW_MAPPING = {'BreakTask': BreakView, 'ContinueTask': ContinueView}

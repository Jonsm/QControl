# -*- coding: utf-8 -*-
#==============================================================================
# module : apply_mag_field_view.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from enaml.layout.api import factory
from enaml.core.api import Conditional
from enaml.widgets.api import (GroupBox, Label, Field, ObjectCombo, CheckBox)
from enaml.stdlib.fields import FloatField

from inspect import cleandoc
from textwrap import fill

from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from hqc_meas.utils.layouts import auto_grid_layout
from hqc_meas.tasks.views.base_instr_view import BaseInstrumentView
from hqc_meas.tasks.tools.string_evaluation import EVALUATER_TOOLTIP

enamldef ApplyMagFieldView(BaseInstrumentView): view:

    attr in_loop : bool = False
    title << task.task_name
    constraints = [factory(auto_grid_layout),
                   driver_val.width == profile_val.width]

    Label: driver_lab:
        text = 'Driver'
    ObjectCombo: driver_val:
        items << sorted(task.driver_list)
        selected := task.selected_driver

    Label:  profile_lab:
        text = 'Instr'
    ObjectCombo: profile_val:
        items << sorted(profiles)
        selected := task.selected_profile

    Conditional:
        condition = not in_loop
        Label:  field_lab:
            text = 'Target field'
        QtLineCompleter: field_val:
            hug_width = 'ignore'
            text := task.target_field
            entries_updater << task.accessible_database_entries
            tool_tip = EVALUATER_TOOLTIP

    Label: rate_lab:
        text = 'Rate (T/min)'
    FloatField: rate_val:
        hug_width = 'strong'
        value := task.rate

    Label: auto_lab:
        text = 'Auto stop heater'
    CheckBox: auto_val:
        checked := task.auto_stop_heater
        tool_tip = fill(cleandoc('''Check to enable the automatic switch off
                            of the switch heater after each new value'''),60)

    Conditional:
        condition << task.auto_stop_heater
        Label:
            text = 'Post heater wait'
        FloatField:
            hug_width = 'strong'
            value := task.post_switch_wait
            tool_tip = fill(cleandoc('''Time to wait after closing the switch
                                     heater before bringing the field to
                                     zero'''),60)

TASK_VIEW_MAPPING = {'ApplyMagFieldTask' : ApplyMagFieldView}

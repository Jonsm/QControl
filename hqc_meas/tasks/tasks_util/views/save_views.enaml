# -*- coding: utf-8 -*-
#==============================================================================
# module : save_views.py
# author : Matthieu Dartiailh & SÃ©bastien Jezouin
# license : MIT license
#==============================================================================
"""
"""
from enaml.layout.api import hbox, align, spacer, vbox, grid
from enaml.widgets.api import (PushButton, Container, Label, Field, FileDialog,
                                GroupBox, ObjectCombo, Dialog, MultilineField,
                                Form, CheckBox)
from inspect import cleandoc
from textwrap import fill

from hqc_meas.tasks.tools.pair_editor import PairEditor
from hqc_meas.tasks.tools.string_evaluation import (EVALUATER_TOOLTIP,
                                                    FORMATTER_TOOLTIP)
from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter


enamldef HeaderDialog(Dialog): dial:

    attr model
    alias header : field.text
    title = 'Header'

    Container:
        constraints = [vbox(field,
                            hbox(default, spacer, cancel, ok))]

        MultilineField: field:
            hug_height = 'weak'
        PushButton: default:
            text = 'Default header'
            clicked ::
                database = model.task_database
                entries = database.list_accessible_entries(model.task_path)
                if 'default_header' in entries:
                    field.text = model.get_from_database('default_header')
                else:
                    field.text = ''
        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()
        PushButton: ok:
            text = 'Ok'
            clicked ::
                dial.accept()


enamldef SavedValueView(Form):
    attr model
    padding = (0,0,0,0)
    Field:
        hug_width = 'strong'
        text := model.label
    QtLineCompleter:
        text := model.value
        entries_updater = model.task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP


ARRAY_SIZE_TOOLTIP = cleandoc('''If left empty the file will be closed at the
                              end of the measure.\n''') + EVALUATER_TOOLTIP


enamldef SaveView(GroupBox):
    """
    """
    attr task
    attr mapping
    title << task.task_name
    constraints = [vbox(
                    grid([mode_lab, points_lab],
                        [mode_val, points_val]),
                    file_cont, ed)]

    Label: mode_lab:
        text = 'Save to'
    ObjectCombo: mode_val:
        items = list(task.get_member('saving_target').items)
        selected := task.saving_target

    Label: points_lab:
        text = 'Points number'
    QtLineCompleter: points_val:
        text := task.array_size
        entries_updater << task.accessible_database_entries
        tool_tip << EVALUATER_TOOLTIP if task.saving_target != 'File'\
                    else ARRAY_SIZE_TOOLTIP

    Container: file_cont:

        hug_height = 'strong'
        enabled << bool(task.saving_target != 'Array')

        GroupBox: folder:

            title = 'Directory'
            constraints = [hbox(path, explore),
                            align('v_center', path, explore)]

            QtLineCompleter: path:
                text := task.folder
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: explore:
                text = 'E'
                hug_width = 'strong'
                clicked ::
                    path = FileDialog(mode = 'directory',
                                    title = 'Select a default path',
                                    ).exec_()
                    if path:
                        task.folder = path

        GroupBox: file:

            title = 'File'
            constraints = [hbox(name, mode, header),
                            align('v_center', name, header)]

            QtLineCompleter: name:
                text := task.filename
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            ObjectCombo: mode:
                items = list(task.get_member('file_mode').items)
                selected := task.file_mode
            PushButton: header:
                text = 'Header'
                hug_width = 'strong'
                clicked ::
                    dial = HeaderDialog(header = task.header, model = task)
                    if dial.exec_():
                        task.header = dial.header

    PairEditor(SavedValueView): ed:
        ed.title = 'Label : Value'
        ed.model << task
        ed.iterable_name = 'saved_values'

enamldef SaveFileView(GroupBox):
    """
    """
    attr task
    attr mapping
    title << task.task_name
    constraints = [vbox(file_cont, ed)]

    Container: file_cont:

        hug_height = 'strong'
        enabled = True

        GroupBox: folder:

            title = 'Directory'
            constraints = [hbox(path, explore),
                            align('v_center', path, explore)]

            QtLineCompleter: path:
                text := task.folder
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: explore:
                text = 'E'
                hug_width = 'strong'
                clicked ::
                    path = FileDialog(mode = 'directory',
                                    title = 'Select a default path',
                                    ).exec_()
                    if path:
                        task.folder = path

        GroupBox: file:

            title = 'File'
            constraints = [hbox(name, header),
                            align('v_center', name, header)]

            QtLineCompleter: name:
                text := task.filename
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: header:
                text = 'Header'
                hug_width = 'strong'
                clicked ::
                    dial = HeaderDialog(header = task.header, model = task)
                    if dial.exec_():
                        task.header = dial.header

    PairEditor(SavedValueView): ed:
        ed.title = 'Label : Value'
        ed.model << task
        ed.iterable_name = 'saved_values'

enamldef SaveFileHDF5View(GroupBox):
    """
    """
    attr task
    attr mapping
    title << task.task_name
    constraints = [vbox(file_cont, ed)]

    Container: file_cont:

        hug_height = 'strong'
        enabled = True

        GroupBox: folder:

            title = 'Directory'
            constraints = [hbox(path, explore),
                            align('v_center', path, explore)]

            QtLineCompleter: path:
                text := task.folder
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: explore:
                text = 'E'
                hug_width = 'strong'
                clicked ::
                    path = FileDialog(mode = 'directory',
                                    title = 'Select a default path',
                                    ).exec_()
                    if path:
                        task.folder = path

        GroupBox: file:

            title = 'File'
            constraints = [hbox(name, header,
                                grid([compression_lab, dtype_lab, lines_lab],
                                     [compression_val, dtype_val, lines_val]) ),
                            align('v_center', name, header)]

            QtLineCompleter: name:
                text := task.filename
                entries_updater << task.accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: header:
                text = 'Header'
                hug_width = 'strong'
                clicked ::
                    dial = HeaderDialog(header = task.header, model = task)
                    if dial.exec_():
                        task.header = dial.header
            Label: compression_lab:
                text = 'Compression'
            CheckBox: compression_val:
                checked := task.compression
                tool_tip = fill(cleandoc('''Applies a GZIP algorithm to the data.
                                            This is totally transparent for the user.'''))
            Label: dtype_lab:
                text = 'Data format'
            ObjectCombo: dtype_val:
                items << list(task.get_member('datatype').items)
                selected := task.datatype
            Label: lines_lab:
                text = 'Approximate number of calls'
            Field: lines_val:
                text := task.callsEstimation
                tool_tip = fill(cleandoc('''Estimate how many times this task will be called
                                            during the measure. An order of magnitude estimate is
                                            enough (one or one thousand ?). This helps h5py
                                            to figure out an appropriate chunk size.'''))

    PairEditor(SavedValueView): ed:
        ed.title = 'Label : Value'
        ed.model << task
        ed.iterable_name = 'saved_values'

enamldef SaveArrayView(GroupBox):
    attr task
    attr mapping
    title << task.task_name
    constraints = [vbox(folder, file,
                        grid([mode_lab, arr_lab],
                             [mode_val, arr_val]))]
    GroupBox: folder:

        title = 'Folder'
        hug_height = 'strong'
        constraints = [hbox(path, explore),
                        align('v_center', path, explore)]

        QtLineCompleter: path:
            text := task.folder
            entries_updater << task.accessible_database_entries
            tool_tip = FORMATTER_TOOLTIP
        PushButton: explore:
            text = 'E'
            hug_width = 'strong'
            clicked ::
                path = FileDialog(mode = 'directory',
                                title = 'Select a default path',
                                ).exec_()
                if path:
                    task.folder = path

    GroupBox: file:

        title = 'File'
        hug_height = 'strong'
        constraints = [hbox(name, header),
                        align('v_center', name, header)]

        QtLineCompleter: name:
            text := task.filename
            entries_updater << task.accessible_database_entries
            tool_tip = FORMATTER_TOOLTIP
        PushButton: header:
            text = 'Header'
            hug_width = 'strong'
            clicked ::
                dial = HeaderDialog(header = task.header, model = task)
                if dial.exec_():
                    task.header = dial.header

    Label: mode_lab:
        text = 'Mode'
    ObjectCombo: mode_val:
        items = list(task.get_member('mode').items)
        selected := task.mode
    Label: arr_lab:
        text = 'Target array'
    QtLineCompleter: arr_val:
        hug_width = 'ignore'
        text := task.target_array
        entries_updater << task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP

TASK_VIEW_MAPPING = {'SaveTask' : SaveView,
                     'SaveFileTask' : SaveFileView,
                     'SaveFileHDF5Task' : SaveFileHDF5View,
                     'SaveArrayTask' : SaveArrayView}

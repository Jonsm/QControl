# -*- coding: utf-8 -*-
#==============================================================================
# module : task_editor.enaml
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from atom.api import Atom, Dict, Value
from enaml.core.api import Looper, Conditional, Include
from enaml.layout.api import vbox, spacer, hbox, align
from enaml.widgets.api import (PushButton, Menu, Action, Container, Stack,
                               StackItem, Label, GroupBox, Form)
from enaml.stdlib.mapped_view import MappedView
from enaml.workbench.core.core_plugin import CorePlugin

from hqc_meas.utils.widgets.list_editor import PopupListMenu

class TaskViewManager(Atom):
    """ Class responsible for instantiating the task view for _TaskListView.

    Using this class allow to request all the views in one pass when
    instantiating a new editor.

    """
    #: Reference to the core plugin of the app.
    core = Value()

    #: Dict mapping Task names to their view.
    views = Dict()

    def __init__(self, children, **kwargs):
        super(TaskViewManager, self).__init__(**kwargs)
        t_classes = set([type(task).__name__ for task in children])
        self.get_views(t_classes)

    def instantiate_view(self, task, attrs):
        """ A helper function instantiating a task view.

        Parameters
        ----------
        task : BaseTask
            Task instance for which to create a view.

        attrs : dict
            Dict of additional object which should be passed to the view if it
            defines the attribute.

        Returns
        -------
        view :
            Created task view.

        """
        name = type(task).__name__
        views = self.views
        if name not in views:
            self.get_views([name])
        view = views[name]
        kwargs = {'task': task}
        for key in attrs:
            if hasattr(view, key):
                kwargs[key] = attrs[key]
        return view(**kwargs)

    def get_views(self, class_names):
        """ Helper method updating the known views with the ones associated
        with the given names.

        """
        cmd = 'hqc_meas.task_manager.views_request'
        views, _ = self.core.invoke_command(cmd,
                                            {'task_classes': class_names})
        self.views.update(views)


enamldef _TaskListView(Container): list_view:
    """ A base custom container to edit the children of a task.

    """
    attr task
    attr core
    attr cache
    attr operations = ['add', 'remove', 'move']
    attr model = TaskViewManager(task.children_task, core=core)

    hug_height = 'strong'
    padding = 0

    Looper:
        #: Better refreshing of the system
        iterable << task.children_task[:]
        Container:
            padding = 0
            constraints = [hbox(button, *view.objects),
                           align('top', button, *view.objects)]
            PushButton: button:
                constraints = [width == 15,
                                height == 20]
                font = 'bold 12pt Consolas'
                text = '>'
                clicked ::
                    edited_list = task.children_task
                    menu = PopupListMenu(
                      model = edited_list,
                      index = edited_list.index(loop_item),
                      factory = core.invoke_command,
                      operations = operations,
                      args = ('hqc_meas.task_manager.build_task',),
                      kwargs = {'parameters': {'parent_ui': button},
                                'trigger': button})
                    menu.popup()
            Include: view:
                objects << [model.instantiate_view(loop_item,
                                                   {'core': core,
                                                    'cache': cache})]


enamldef TaskEditor(Container): view:
    """ A custom container to edit the children of a task. Support folding.

    """

    attr task
    attr core
    attr cache

    padding = 0
    Conditional:
        condition << not bool(task.children_task)
        PushButton:
            text = 'Add first element'
            clicked ::
                obj = core.invoke_command('hqc_meas.task_manager.build_task',
                                          {'parent_ui': view}, view)
                if obj:
                    task.children_task.append(obj)
    Conditional:
        condition << bool(task.children_task)
        Container: box:
            attr stack_index = cache.get(task.task_path, 1)
            constraints = [vbox(hbox(folding, foldable_content),spacer),
                           align('top', folding, foldable_content)]
            padding = (0,5,2,2)
            PushButton: folding:
                text = '-' if stack_index == 1 else '+'
                constraints = [width == 15, height == 20]
                clicked ::
                    if folding.text == '-':
                        box.stack_index = 0
                        cache[task.task_path] = 0
                        folding.text = '+'
                    else:
                       box.stack_index = 1
                       cache[task.task_path] = 1
                       folding.text = '-'
            Container: foldable_content:
                padding = 0
                Stack:
                    size_hint_mode = 'current'
                    hug_width = 'ignore'
                    index << stack_index
                    StackItem:
                        Container:
                            hug_height = 'strong'
                            padding = 0
                            Label:
                                text = 'FOLDED ITEMS'
                    StackItem:
                        _TaskListView:
                            task = view.task
                            core = view.core
                            cache = view.cache

enamldef NonFoldingTaskEditor(Container): view:
    """ A custom container to edit the children of a task.

    """
    attr task
    attr core
    attr cache
    padding = 1

    Conditional:
        condition << not bool(task.children_task)
        PushButton:
            text = 'Add first element'
            clicked ::
                obj = core.invoke_command('hqc_meas.task_manager.build_task',
                                          {'parent_ui': view}, view)
                if obj:
                    task.children_task.append(obj)
    Conditional:
        condition << bool(task.children_task)
        Container:
            _TaskListView:
                task = view.task
                core = view.core
                cache = view.cache

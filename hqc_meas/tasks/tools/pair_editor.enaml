# -*- coding: utf-8 -*-
#==============================================================================
# module : pair_editor.py
# author : Matthieu Dartiailh
# license : MIT license
#==============================================================================
"""
"""
from atom.api import Atom, Str, Value, Callable, ContainerList, observe, Typed
from enaml.widgets.api import Container
from hqc_meas.utils.widgets.list_editor import ListEditor

class Pair(Atom):
    """ Place holder class for the Pair editor.

    """
    label = Value('')
    value = Value('')

    task = Value()

    refresh_method = Callable()

    def __init__(self, **kwargs):
        super(Pair, self).__init__(**kwargs)
        self.observe('label', self._update_model)
        self.observe('value', self._update_model)

    def _update_model(self, change):
        self.refresh_method({'name': 'pair'})

class PairEditorModel(Atom):
    """ Model converting a list of pairs into an editable list of Pair.

    """
    model = Value()
    iterable_name = Str()

    pairs = ContainerList(Typed(Pair))

    @observe('pairs')
    def refresh(self, change):
        """ Synchronise pairs and the underlying model.

        """
        setattr(self.model, self.iterable_name,
                [(p.label, p.value) for p in self.pairs])

    def _default_pairs(self):
        return [Pair(label=p[0], value=p[1], refresh_method=self.refresh,
                     task=self.model)
                for p in getattr(self.model, self.iterable_name)]


template PairEditor(Content):
    Container: main:
        padding = 2
        attr model
        attr iterable_name
        alias operations : ed.operations
        alias title: ed.title
        alias alignment : ed.alignment

        attr _model = PairEditorModel(model=model,
                                       iterable_name=iterable_name)
        ListEditor(Content): ed:
            ed.model = _model
            ed.iterable_name = 'pairs'
            ed.factory = Pair
            ed.kwargs = {'refresh_method': _model.refresh, 'task': main.model}
